# define to inherit any missing prompts from the default prompt
inherit_default: False
# System defines the system prompt to the model
system:
  # Setup defines the model setup prompt. This lets the model know what area of knowledge to focus on for this task
  setup: >
    You are an expert in extracting small text from botanical catalogues and organising them into JSON files with respect to a defined structure.
  # context defines the context of the task. This includes the input to the model and the description of said input
  # instructions define the step-by-step instructions for the model to follow through
  instructions: |
    1) **Extract Text**: Extract all text from the image, preserving the layout order and formatting as much as possible.
    
    2) **Organize into JSON**: Structure the extracted text from step 1 into JSON.
    
    3) **Assign Metadata**:
       - **Division**: Extract if available. Division is defined by a larger, bold font but not capitalized. If not found, set as "N/A". (e.g., "Dicotyledone").
       - **Page Number**: Capture the page number, typically found at the top corners of the page. If not found, set as "N/A". (e.g., "132").

    4) **Identify Family Names**:
       - Each family name is written in uppercase (e.g., "ACERACEAE").
       - Store it as `familyName` in the JSON structure.
       - Ensure family name is in Capital Letters

    5) **Identify Species**:
       - Species names appear in italics and are typically followed by an author abbreviation (e.g., "Acer campestre L.").
       - Species names are generally found under family names.
       - Store each as `speciesName` under its respective `familyName`.

    6) **Capture Folder Details**:
       - Each species may have one or more folders labeled as "Folder X".
       - Extract the folder number (`folderNo`) and description. Use the text after "Folder X" as `description`.
       - Check the next column for continued text where appropriate

    7) **Capture Additional Text**:
       - Extract text before initial family name and perform steps 5 and 6
       - Where no species information is available, store the text as it is under "noFamilyName"

    8) **Validation**:
       - Ensure all text extracted in step 1 is correctly organised into JSON
       - Leave fields empty or set to "N/A" if information is not available.
       - Avoid duplicate keys and ensure all keys are in camelCase.
       - Ensure JSON is valid with no trailing commas or unquoted keys.
       - Do not perform grammar checks or corrections.
       
    9) Explain step-by-step what you have done till now
  # rules define the key-value rules for each expected key in the output json dict
  rules:
    metadata: Metadata for each page, containing the division (if available) and page number.
    division: >
      The division is defined by a non-capitalized, bold, and larger font size. If unavailable, set to "N/A".
    page: Page number, located at the top left or right. If unavailable, set to "N/A".
    contents: A list of dictionaries containing each family's name and species details.
    familyName: >
      The scientific family name in uppercase. If not available, set as "N/A".
    species: A list of dictionaries for each species under the family, containing `speciesName` and `folders`.
    speciesName: >
      The full scientific name of the species as written in the image. No corrections.
    folders: A list of dictionaries, each representing a folder with `description` and `citations`.
    folderNo: The folder number, often represented as "Folder, X." where X is the number. Folder number must be an integer.
    description: >
      A description of the folder contents, including location or collection details.
    noFamilyName: >
      a list of dictionaries and text much like contents but for additional text that are found before the first family name.

  # template defines the output json structure
  template: |
    {
        "metadata": {
            "division": "", 
            "page": ""
        },
        "contents": [ 
            {
                "familyName": "", 
                "species": [ 
                    {
                        "speciesName": "",
                        "folders": [ 
                            {
                                folderNo: "",
                                "description": ""
                            },
                        ],
                    },
                ]
            },
        ],
        "noFamilyName": [
            "", {
                        "speciesName": "",
                        "folders": [ 
                            {
                                folderNo: "",
                                "description": ""
                            },
                        ],
                    },
        ]
    }

# user defines the user input. This can contain more than one prompt. 
# Different prompts will be passed to the model as individual inputs
user:
  # the prompt defines the user's prompt to the model
  image: Extract the text from the botanical catalogue. Format it into the given JSON structure.
    