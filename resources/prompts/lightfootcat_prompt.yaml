#Define variable configuration
# Model config
#model: "qwen2.5"
ocr_extraction_model: null
output_save_file_name: "lightfootcat"
output_save_path: "outputs/lightfootcat_with_extract/"    # Where to save the output
has_columns: True
double_pages: True
# define to inherit any missing prompts from the default prompt
inherit_default: False
# Path to default file if inheriting from another custom prompt
default_file: null
# Any divisions in the catalogue
divisions: ["Dicotyledones", "Monocotyledones", "Pteridophyta", "Hepaticae", "Algae"]
# System defines the system prompt to the model
system:
  # Setup defines the model setup prompt. This lets the model know what area of knowledge to focus on for this task
  setup: >
    You are an expert in botanical cataloguing and classification. Your task is to accurately extract and format botanical information from the provided text into a structured JSON format. You will follow strict output rules to ensure the data is presented correctly.
  # context defines the context of the task. This includes the input to the model and the description of said input
  # instructions define the step-by-step instructions for the model to follow through
  instructions: |
    Reformat the following botanical text EXACTLY into JSON according to the provided SCHEMA.

    - The output must be a single VALID JSON OBJECT with no surrounding text, explanations, markdown, or formatting.
    - DO NOT GENERATE ANYTHING beyond the required JSON structure.
    - **ALL KEYS MUST BE QUOTED PROPERLY**.
    - NO TRAILING COMMAS should be present.
    - Extract ONLY the text in the providede text; do not modify, paraphrase, infer or assume missing details.
    - Escape all special characters properly: `[` → `\[`, `]` → `\]`, `.` → `\.` if part of abbreviation or formatting.
    - When extracting text like dates, locations, or scientific references, maintain the exact format from the source without attempting to standardize or reformat.
    Output must strictly match this schema:
  # rules define the key-value rules for each expected key in the output json dict
  # rules:
  #   familyName: >
  #     The scientific family name in uppercase. If not available, use "N/A".
  #   species: >
  #     A list of dictionaries for each species under the family. Each dictionary should include:
  #     - speciesName: The full scientific name as written in the text.
  #     - folders: A list of dictionaries, each containing:
  #          - description: A description of the folder contents.For description fields that contain citations or quotes, ensure proper escaping of all contained quotation marks.

  # schema defines the output json structure
  schema: default

  Examples: 
    - input: |
        ACERACEAE
        Acer campestre L.
        1 folder. Acer campestre [TA]
        Acer pseudoplatanus L.
        2 folders. 07
        Folder 1. Acer Pseudo-Platanus
        [(G]. i. "Maple. Bulls: [Bulstrode]
        Park” [JL]
        Folder 2. Acer Pseudo-Platanus
        [TA].

    - output_species_and_records: |
        {
        "family_name": "ACERACEAE",
        "species": [
            {
                "species_name": "Acer campestre L\.",
                "number_of_folders": 1,
                "number_of_sheets": 0,
                "folders_and_sheets": [
                    {
                        "description": "1 folder\. Acer campestre \[TA\]"
                    }
                ]
            },
            {
                "species_name": "Acer pseudoplatanus L\.",
                "number_of_folders": 2,
                "number_of_sheets": 0,
                "folders_and_sheets": [
                    {
                        "description": "Folder 1\. Acer pseudoplatanus \[\(G\]\. i\. \"Maple\. Bulls\: \[Bulstrode\] Park\" \[JL\]"
                    },
                    {
                        "description": "Folder 2\. Acer pseudoplatanus \[TA\]"
                    }
                ]
            }
        ]
    - input: |
        CAMPANULACEAE
        Campanula latifolia L.
        2 folders.
        Folder 1. Companula latifolia [TA].
        Folder 2. Companula latifolia [G].
        Campanula patula L.
        1 folder. Campanula patula [TA].
        Campanula rapunculus L.
        2 folders.

        Folder 1, Campanula rapunculus
        [TA].

        ightfoot

        Folder 2. Campanula rapunculus
        [G].

    - output: |
        {
            "family_name": "CAMPANULACEAE",
            "species": [
                {
                    "species_name": "Campanula latifolia L\.",
                    "number_of_folders": 2,
                    "number_of_sheets": 0,
                    "folders_and_sheets": [
                        {
                            "description": "Folder 1\. Companula latifolia \[TA\]"
                        },
                        {
                            "description": "Folder 2\. Companula latifolia \[G\]"
                        }
                    ]
                },
                {
                    "species_name": "Campanula patula L\.",
                    "number_of_folders": 1,
                    "number_of_sheets": 0,
                    "folders_and_sheets": [
                        {
                            "description": "Campanula patula \[TA\]"
                        }
                    ]
                },
                {
                    "species_name": "Campanula rapunculus L\.",
                    "number_of_folders": 2,
                    "number_of_sheets": 0,
                    "folders_and_sheets": [
                        {
                            "description": "Folder 1\, Campanula rapunculus \[TA\]"
                        },
                        {
                            "description": "Folder 2\. Campanula rapunculus \[G\]"
                        }
                    ]
                }
            ]
        }

# user defines the user input. This can contain more than one prompt. 
# Different prompts will be passed to the model as individual inputs
user:
  # the prompt defines the user's prompt to the model
  text: | 
   Extract the botanical information from the provided text and format it into JSON according to the schema. 
   Ensure that all special characters are escaped properly and that the output is a single valid JSON object with no additional text or formatting.
  
   Text to extract from:
   \n\n{extracted_text}\n\n
    
